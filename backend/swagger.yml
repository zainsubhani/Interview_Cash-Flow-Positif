openapi: 3.0.0
info:
  title: Task Management API
  description: API for managing tasks with CRUD operations
  version: 1.0.0
servers:
  - url: http://localhost:3001
    description: Development server
paths:
  /tasks/get:
    get:
      summary: Get all tasks
      description: Retrieves a list of all tasks
      operationId: getAllTasks
      responses:
        "200":
          description: A list of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Task"
  /tasks/create:
    post:
      summary: Create a new task
      description: Creates a new task with the provided data
      operationId: createTask
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskInput"
      responses:
        "201":
          description: Created task
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /tasks/{id}:
    get:
      summary: Get task by ID
      description: Retrieves a specific task by its ID
      operationId: getTaskById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Task found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        "404":
          description: Task not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /tasks/update/{id}:
    patch:
      summary: Update task status
      description: Updates the status of a specific task
      operationId: updateTaskStatus
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskStatusUpdate"
      responses:
        "200":
          description: Updated task
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Task not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /tasks/delete/{id}:
    delete:
      summary: Delete task
      description: Deletes a specific task by its ID
      operationId: deleteTask
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Task deleted successfully
        "404":
          description: Task not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    TaskStatus:
      type: string
      enum: [pending, done]
    TaskInput:
      type: object
      required:
        - title
      properties:
        title:
          type: string
          minLength: 1
        description:
          type: string
        status:
          $ref: "#/components/schemas/TaskStatus"
          default: pending
    TaskStatusUpdate:
      type: object
      required:
        - status
      properties:
        status:
          $ref: "#/components/schemas/TaskStatus"
    Task:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        status:
          $ref: "#/components/schemas/TaskStatus"
      required:
        - id
        - title
        - description
        - status
    Error:
      type: object
      properties:
        error:
          oneOf:
            - type: string
            - type: array
              items:
                type: object
      required:
        - error
